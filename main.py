import discord
from discord.ext import commands, tasks
from discord.ui import Button, View
import random
from discord.ext.commands import Bot
from dotenv import load_dotenv
import os
from requests import get
import openai
import wikipediaapi
from discord.ext.commands import MemberConverter
import re
import uuid
import json
import requests
import yt_dlp
from discord.voice_client import VoiceClient
from pydub import AudioSegment
from pytube import YouTube
from ytmusicapi import YTMusic
import asyncio
import logging
import glob

from discord import Color
from discord.ext.commands import BucketType
import aiohttp
import io
from bs4 import BeautifulSoup
from datetime import datetime
import pandas as pd
# from googleapiclient.discovery import build
from sympy import symbols, solve, Eq
import asyncpg
import ffmpeg
from upstash_redis import Redis
import redis
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi


load_dotenv()

SONG_URLS_FILE = "song_urls.txt" 
ytmusic = YTMusic()
pause = False
MAX_QUEUE_SIZE = 20

discordtoken = os.getenv("TOKEN")
openai_api_key = os.getenv("API_KEY")
openai.api_key = openai_api_key
news_key = os.getenv("NEWS_API_KEY")
weather_key = os.getenv("OPEN_WEATHER_KEY")
SEARCH_ENGINE_ID = os.getenv("SEARCH_ENGINE_ID")
API_KEY = os.getenv("GOOGLE_API_KEY")
HUGGING_FACE_API_TOKEN = os.getenv('HUGGING_FACE_API')

intents = discord.Intents.all()
intents.typing = True
intents.presences = True
intents.members = True
intents.message_content = True
bot = commands.Bot(command_prefix='s.', intents=intents)

queue = asyncio.Queue()


yt_dl_opts = {'format': 'bestaudio/best'}
ytdl = yt_dlp.YoutubeDL(yt_dl_opts)

ffmpeg_options = {'options': "-vn"}

def is_playlist_url(url):
    return bool(re.search(r'list=([0-9A-Za-z_-]+)', url))

def remove_mp4_files():
    for file in os.listdir('.'):
        if file.endswith('.mp4'):
            os.remove(file)


@bot.event
async def on_ready() -> None:
    logging.basicConfig(filename='discordBot.errors', level=logging.ERROR)
    print(f"{bot.user.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("-"*100)


@bot.event
async def on_member_join(member):
    welcome_channel = discord.utils.get(member.guild.channels, name = "‚îäü§ñ‚îä–Ω—É-–∑–¥–∞—Ä–æ–≤–∞")
    welcome_channel1 = discord.utils.get(member.guild.channels, name = "–≤—ã–¥–∞—á–∞-—Ä–æ–ª–∏")
    welcome_channel2 = discord.utils.get(member.guild.channels, name = "–±—É–∫–≤—ã_–∏_—Ü–∏—Ñ—Ä—ã")
    welcome_message = f"–≠–π, –π–æ—É {member.mention} —á–µ –∫–∞–≤–æ? –¢—ã –ø—Ä–∏–±—ã–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä {member.guild}! –ù–∏–∂–µ –µ—Å—Ç—å –∫–∞–Ω–∞–ª #‚îä‚≠ê‚îä–≤—ã–±–æ—Ä-—Ä–æ–ª–∏"
    welcome_message1 = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {member.mention} –Ω–∞ —Å–µ—Ä–≤–µ—Ä {member.guild}! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å –∑–¥–µ—Å—å."
    welcome_message2 = f"–ß–µ —Å –¥–µ–Ω—å–≥–∞–º–∏ {member.mention}? –¢—ã –∑–∞–ª–µ—Ç–µ–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä {member.guild} –∏ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –∫–æ—Å–∞—Ä—å!"

    if welcome_channel is not None:
        await welcome_channel.send(welcome_message)
    if welcome_channel1 is not None:
        await welcome_channel1.send(welcome_message1)
    if welcome_channel2 is not None:
        await welcome_channel2.send(welcome_message2)



@bot.command(help="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
async def doc(ctx: commands.Context):
    some_url = "https://discord.com/oauth2/authorize?client_id=1107617102078169128"
    embed = discord.Embed(
        title="‚ãÜ.Àö‚úÆüéß‚úÆÀö.‚ãÜ –ú–£–ó–´–ö–ê–õ–¨–ù–´–ô –ë–û–¢ –ö–†–Ø–ö–õ ‚ãÜ.Àö‚úÆüéß‚úÆÀö.‚ãÜ",
        description="üëá–°–ü–ò–°–û–ö –î–û–°–¢–£–ü–ù–´–• –ö–û–ú–ê–ù–îüëá",
        url=some_url,
        color=discord.Color.random(),
    )
    embed.add_field(name=" ", value=" ")
    embed.add_field(name="‚åû s.play ‚åù", value=" –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç—Ä–µ–∫/–≤–∏–¥–µ–æ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.play [–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞/YouTube URL]", inline=False)
    #embed.add_field(name="\u200b", value="\u200b")
    embed.add_field(name="‚åû s.stop ‚åù", value="–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π —Ç—Ä–µ–∫/–≤–∏–¥–µ–æ —Å YouTube. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.stop", inline=False)
    #embed.add_field(name=chr(173), value=chr(173))
    embed.add_field(name="‚åû s.menu ‚åù", value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.menu", inline=False)
    embed.add_field(name="‚åû s.skip ‚åù", value="–ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π —Ç—Ä–µ–∫/–≤–∏–¥–µ–æ —Å YouTube –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ –æ—á–µ—Ä–µ–¥–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.skip", inline=False)
    embed.add_field(name="‚åû s.queue ‚åù", value="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.queue", inline=False)
    embed.add_field(name="‚åû s.art ‚åù", value="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.art [–ó–∞–ø—Ä–æ—Å]", inline=False)
    #embed.add_field(name="‚åû s.rdog ‚åù", value="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±–∞—á–∫–∏üòÖ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.rdog", inline=False)
    embed.add_field(name="‚åû s.askwiki ‚åù", value="–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∏–∑ Wikipedia –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.askwiki [–ó–∞–ø—Ä–æ—Å]", inline=False)
    embed.add_field(name="‚åû s.news ‚åù", value="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.news [–ó–∞–ø—Ä–æ—Å]", inline=False)
    embed.add_field(name="‚åû s.weather ‚åù", value="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.weather [–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞]", inline=False)
    embed.add_field(name="‚åû s.rnum  ‚åù", value="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ –Ω—É–∂–Ω–æ–≥–æ –í–∞–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.rnum [–ß–∏—Å–ª–æ]", inline=False)
    #embed.add_field(name="‚åû s.math ‚åù", value="–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.math [–ß–∏—Å–ª–æ + | - | * | /  –ß–∏—Å–ª–æ]", inline=False)
    #embed.add_field(name="‚åû s.ping ‚åù", value="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.ping", inline=False)
    embed.add_field(name="‚åû s.serverstats ‚åù", value="–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.serverstats", inline=False)
    #embed.add_field(name="‚åû s.vote ‚åù", value="–°–æ–∑–¥–∞–π—Ç–µ –æ–ø—Ä–æ—Å, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∞–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.vote [–ù–∞–∑–≤–∞–Ω–∏–µ] [–û–ø–∏—Å–∞–Ω–∏–µ]", inline=False)
    #embed.add_field(name="‚åû s.check_vote ‚åù", value="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –ó–ê –∏ –ü–†–û–¢–ò–í —É –æ–ø—Ä–æ—Å–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.check_vote [–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞]", inline=False)
    embed.add_field(name=" ", value=" ")
    embed.add_field(name="P.S.", value="–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –º—É–∑—ã–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–Ω–æ–ø–∫–∞–º–∏, –Ω–æ –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤—ã—à–µ", inline=False)
    embed.add_field(name=" ", value=" ")
    embed.add_field(name="–ü—Ä–µ—Ñ–∏–∫—Å—ã –∫–æ–º–∞–Ω–¥!", value="–ù–∞—á–∏–Ω–∞–π—Ç–µ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞ s. (–∏–Ω–∞—á–µ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è!) –ü–û–ú–ù–ò–¢–ï –û–ë –≠–¢–û–ú –ü–†–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ò –ö–û–ú–ê–ù–î!", inline=False)
    embed.add_field(name=" ", value=" ")
    embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/1107806049139953754/1246868489080275016/2.jpg?ex=665df445&is=665ca2c5&hm=9260532836cce325d31b36f94defbeebe6e339b03b94eeced8709bab429d9f01&")
    embed.set_footer(text="–ö—Ä—è–∫–ª", icon_url="https://cdn.discordapp.com/attachments/1107806049139953754/1246868489080275016/2.jpg?ex=665df445&is=665ca2c5&hm=9260532836cce325d31b36f94defbeebe6e339b03b94eeced8709bab429d9f01&")
    await ctx.send(embed=embed)

queue = asyncio.Queue()
class Track:
    def __init__(self, url):
        self.url = url
        self.id = uuid.uuid4()
        self.filename = None

    async def download(self):
        yt = YouTube(self.url)
        stream = yt.streams.filter(only_audio=True).first()
        self.filename = f"{self.id}.mp4"
        stream.download(filename=self.filename)

async def delete_file(filename):
    if filename and os.path.exists(filename):
        os.remove(filename)


def append_url_to_file(url):
    # –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ URL-–∞–¥—Ä–µ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞
    if os.path.exists(SONG_URLS_FILE):
        with open(SONG_URLS_FILE, 'r') as f:
            urls = f.readlines()
    else:
        urls = []

    # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π URL –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    urls.append(f"{url}\n")

    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ URL-–∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20, —É–¥–∞–ª–∏—Ç–µ —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
    if len(urls) > 20:
        urls.pop(0)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ URL-–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    with open(SONG_URLS_FILE, 'w') as f:
        f.writelines(urls)


async def play_track(ctx, track):
    if not track.filename:
        await ctx.send("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.")
        return

    await ctx.send(f'–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: "{YouTube(track.url).title}"')
    view = ControlButtons(ctx, bot)
    await ctx.send("–≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º:", view=view)

    source = discord.FFmpegOpusAudio(track.filename)
    ctx.voice_client.play(source)

    while ctx.voice_client.is_playing() or ctx.voice_client.is_paused():
        await asyncio.sleep(1)
    
    await delete_file(track.filename)
    await play_next(ctx)

async def add_to_queue(ctx, url, prev):
    if queue.qsize() >= MAX_QUEUE_SIZE:
        await ctx.send("–û—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
        return False

    if ctx.voice_client is None and ctx.author.voice:
        await ctx.author.voice.channel.connect()
    elif ctx.voice_client is None:
        await ctx.send("–í—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")
        return False

    track = Track(url)
    try:
        await track.download()
    except Exception as e:
        await ctx.send(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        return False

    await queue.put(track)

    # –û–±—ä—è–≤–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ–≥–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç—Ä–µ–∫–∞, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if prev:
        if ctx.voice_client.is_playing():
            current_track = YouTube(ctx.voice_client.source.title)
            await ctx.send(f'–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–µ—Å–Ω—è: "{current_track.title}"')
    else:
        append_url_to_file(url)

    return True


async def play_next(ctx):
    if not queue.empty():
        next_track = await queue.get()
        if not ctx.voice_client.is_playing():
            await play_track(ctx, next_track)
        queue.task_done()

async def process_playback(ctx, url):
    if is_playlist_url(url):
        playlist_id_match = re.search(r'list=([0-9A-Za-z_-]+)', url)
        if not playlist_id_match:
            await ctx.send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ URL.")
            return

        playlist_id = playlist_id_match.group(1)
        playlist_info = ytmusic.get_playlist(playlist_id)
        tracks = playlist_info['tracks']
        for track in tracks:
            video_url = f"https://www.youtube.com/watch?v={track['videoId']}"
            success = await add_to_queue(ctx, video_url,False)
            if not success:
                await ctx.send("–û—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤.")
                break
    else:
        video_id_match = re.search(r'(?:v=|/)([0-9A-Za-z_-]{11}).*', url)
        if video_id_match:
            video_id = video_id_match.group(1)
            video_url = f"https://www.youtube.com/watch?v={video_id}"
            await add_to_queue(ctx, video_url,False)
        else:
            search_results = ytmusic.search(url, filter='songs')
            if search_results:
                first_result = search_results[0]
                video_url = f"https://www.youtube.com/watch?v={first_result['videoId']}"
                await add_to_queue(ctx, video_url ,False)
            else:
                await ctx.send("–ü–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    if not ctx.voice_client.is_playing():        
        await play_next(ctx)

class ControlButtons(View):
    def __init__(self, ctx, bot):
        super().__init__(timeout=None)
        self.ctx = ctx
        self.bot = bot

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        ctx = await self.bot.get_context(interaction.message)
        await interaction.response.defer()
        return True

    @discord.ui.button(label="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", style=discord.ButtonStyle.success, emoji="‚ñ∂Ô∏è", custom_id="play_list")
    async def play_list_button(self, interaction: discord.Interaction, button: Button):
        if interaction.guild.voice_client is None:
            if interaction.user.voice:
                await interaction.user.voice.channel.connect()
            else:
                await interaction.response.send_message("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", ephemeral=True)
                return
        await play_song_file(interaction)
        await interaction.followup.send("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Å–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞.", ephemeral=True)

    @discord.ui.button(label="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", style=discord.ButtonStyle.primary, emoji="‚è≠Ô∏è", custom_id="skip_button")
    async def skip_button(self, interaction: discord.Interaction, button: Button):
        await interaction.followup.send("–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏.", ephemeral=True)
        ctx = await self.bot.get_context(interaction.message)
        await ctx.invoke(self.bot.get_command("skip"))

    @discord.ui.button(label="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", style=discord.ButtonStyle.danger, emoji="‚èπÔ∏è", custom_id="stop_button")
    async def stop_button(self, interaction: discord.Interaction, button: Button):
        await interaction.followup.send("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏.", ephemeral=True)
        ctx = await self.bot.get_context(interaction.message)
        await ctx.invoke(self.bot.get_command("stop"))

    @discord.ui.button(label="–û—á–µ—Ä–µ–¥—å", style=discord.ButtonStyle.secondary, emoji="üìã", custom_id="queue_button")
    async def queue_button(self, interaction: discord.Interaction, button: Button):
        await interaction.followup.send("–°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏.", ephemeral=True)
        ctx = await self.bot.get_context(interaction.message)
        await ctx.invoke(self.bot.get_command("queue"))

#–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò –õ–ò–®–ù–ò–ï –ö–ù–û–ü–ö–ò –í –ú–ï–ù–Æ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø
'''
   @discord.ui.button(label="–°–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞", style=discord.ButtonStyle.secondary, emoji="üóíÔ∏è", custom_id="playlist_queue_button")
    async def playlist_queue_list_button(self, interaction: discord.Interaction, button: Button):
        await interaction.followup.send("–°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞.", ephemeral=True)
        ctx = await self.bot.get_context(interaction.message)
        await ctx.invoke(self.bot.get_command("playlist_queue"))

    @discord.ui.button(label="–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫", style=discord.ButtonStyle.danger, emoji="üóëÔ∏è", custom_id="del_playlist")
    async def del_playlist_button(self, interaction: discord.Interaction, button: Button):
        await interaction.followup.send("–§–∞–π–ª –ø–ª–µ–π–ª–∏—Å—Ç–∞ —É–¥–∞–ª–µ–Ω.", ephemeral=True)
        ctx = await self.bot.get_context(interaction.message)
        await ctx.invoke(self.bot.get_command("del_playlist"))
'''

@bot.command(aliases=['Play', 'PLAY', '–∏–≥—Ä–∞–π', '–ò–ì–†–ê–ô', '–ò–≥—Ä–∞–π', '—Å—ã–≥—Ä–∞–π',
                      '–°—ã–≥—Ä–∞–π', '–°–´–ì–†–ê–ô', '–∑–¥—Ñ–Ω', '–ó–¥—Ñ–Ω', '–ó–î–§–ù', 'p', 'P',
                      'pl', 'PL', 'Pl', '–∑', '–ó', '–∑–¥', '–ó–î', '–ó–¥', '–ü–ª–µ–π',
                      '–ü–õ–ï–ô', '–ø–ª–µ–π', '–ü–ª—ç–π', '–ü–õ–≠–ô', '–ø–ª—ç–π'], help='–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —Å YouTube')
async def play(ctx, *, url=""):
    if url:
        await process_playback(ctx, url)

@bot.command(aliases=['queue', 'Queue', 'QUEUE', '–π–≥—É–≥—É', '–ô–≥—É–≥—É', '–ô–ì–£–ì–£', '–æ—á–µ—Ä–µ–¥—å',
                      '–û—á–µ—Ä–µ–¥—å', '–û–ß–ï–†–ï–î–¨', '—Å–ø–∏—Å–æ–∫', '–°–ø–∏—Å–æ–∫', '–°–ü–ò–°–û–ö',
                      'list', 'List', 'LIST', '–¥—à—ã–µ', '–î—à—ã–µ', '–î–®–´–ï', '–õ–∏—Å—Ç',
                      '–ª–∏—Å—Ç', '–õ–ò–°–¢', '–ø–µ—Å–Ω–∏', '–ü–µ—Å–Ω–∏', '–ü–ï–°–ù–ò', 'songs',
                      'Songs', 'SONGS', '—ã—â—Ç–ø—ã', '–´–©–¢–ü–´', '–´—â—Ç–ø—ã', 'q'], help='–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Å–Ω–∏ –≤ –æ—á–µ—Ä–µ–¥–∏')
async def show_queue(ctx):
    if queue.empty():
        await ctx.send("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
    else:
        response = [f"{i+1}. {YouTube(track.url).title}" for i, track in enumerate(queue._queue)]
        await ctx.send("\n".join(response))

@bot.command(name='skip', help='–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫')
async def skip(ctx):
    if ctx.voice_client and ctx.voice_client.is_playing():
        ctx.voice_client.stop()
        await asyncio.sleep(1)        
        await play_next(ctx)
   
@bot.command(aliases=['ps', 'wait', 'wt', 'pause', '—Å—Ç–æ–ø', '–ø–∞—É–∑–∞'], help='–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å')
async def stop(ctx):
    
    global should_continue_adding,pause
    pause=True
    should_continue_adding = False
    if ctx.voice_client and (ctx.voice_client.is_playing() or ctx.voice_client.is_paused()):
        ctx.voice_client.stop()
        await asyncio.sleep(1)
        for mp4_file in glob.glob('*.mp4'):
            os.remove(mp4_file)
    while not queue.empty():
        queue.get_nowait()
    await skip(ctx)


@bot.event
async def on_message(message):
    if message.author == bot.user or not message.content:
        return

    if message.channel.name == "botyjebane":
        ctx = await bot.get_context(message)
        content = message.content.lower()
        if content.startswith("/"):
            command = content[1:]
            if command in ["p", "stop", "skip", "queue", "menu"]:
                await process_command(ctx, command)
                return
        else:
            if message.content in ["p", "stop", "skip", "queue","menu"]:
                command = message.content
                await process_command(ctx, command)
                return
        await process_playback(ctx, message.content)

    await bot.process_commands(message)

async def process_command(ctx, command):
    if command == "p":
        await play(ctx)
    elif command == "stop":
        await stop(ctx)
    elif command == "skip":
        await skip(ctx)
    elif command == "queue":
        await show_queue(ctx)
    elif command == "menu": 
        await menu(ctx)


def read_urls_from_file():
    if not os.path.exists(SONG_URLS_FILE):
        return []
    with open(SONG_URLS_FILE, 'r') as f:
        urls = f.readlines()
    return [url.strip() for url in urls]



@bot.command(name='play_song_file', help='–î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Å–Ω–∏ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –æ—á–µ—Ä–µ–¥—å –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å —Å–∞–º–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ')
async def play_song_file_command(ctx):
       await play_song_file(ctx)



async def play_song_file(ctx_or_interaction):
    global pause
    if isinstance(ctx_or_interaction, discord.Interaction):
        ctx = await bot.get_context(ctx_or_interaction.message)
    else:
        ctx = ctx_or_interaction

    if ctx.voice_client is None:
        if ctx.author.voice:
            await ctx.author.voice.channel.connect()
        else:
            await ctx.send("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return

    urls = read_urls_from_file()

    for url in reversed(urls):  # –ù–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if queue.qsize() >= MAX_QUEUE_SIZE:
            await ctx.send("–û—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤.")
            break

        success = await add_to_queue(ctx, url, True)
        if not success:
            break
        if not ctx.voice_client.is_playing() and not queue.empty():
            await play_next(ctx)
        await asyncio.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á

        # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ–ª–∂–Ω–æ –ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è
        if  pause:
            
            pause = False 
            break


       
@bot.command(name='del_playlist', help='–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –ø–ª–µ–π–ª–∏—Å—Ç–∞')
async def del_playlist(ctx):
    if os.path.exists(SONG_URLS_FILE):
        os.remove(SONG_URLS_FILE)
        await ctx.send("–§–∞–π–ª –ø–ª–µ–π–ª–∏—Å—Ç–∞ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
    else:
        await ctx.send("–§–∞–π–ª –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
       
@bot.command(name='playlist_queue', help='–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –≤ —Ñ–∞–π–ª–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞')
async def playlist_queue(ctx):
    
    if not os.path.exists(SONG_URLS_FILE):
        await ctx.send("–§–∞–π–ª –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    urls = read_urls_from_file()
    if not urls:
        await ctx.send("–§–∞–π–ª –ø–ª–µ–π–ª–∏—Å—Ç–∞ –ø—É—Å—Ç.")
        return

    titles = []
    for url in urls:
        yt = YouTube(url)
        titles.append(yt.title)

    response = "\n".join(titles)
    await ctx.send(f"–°–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –≤ —Ñ–∞–π–ª–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞:\n{response}")
    
@bot.command(name='menu', help='–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
async def menu(ctx):
    view = ControlButtons(ctx, bot)
    await ctx.send("–≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º:", view=view)


@bot.command(help="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±–∞—á–∫–∏üòÖ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.rdog")
async def rdog(ctx):
    try:
        const = requests.get("https://random.dog/woof.json")
        stuff = json.loads(const.text)
        embed = discord.Embed(title=f"URL: {stuff['url']}", color = discord.Color.random())
        embed.set_image(url=f"{stuff['url']}")
        await ctx.send(embed=embed)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ {ctx.command}: {e}")
        await ctx.send(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç—É")



@bot.command(help="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.news [–ó–∞–ø—Ä–æ—Å]")
async def news(ctx, innews):
    news = requests.get(f"https://newsapi.org/v2/everything?q={innews}&apiKey={news_key}").json()
    thnews = news["articles"]
    if news["status"] == "ok":
        for i , article in enumerate(thnews):
            if i < 5:
                emend = discord.Embed(title=article["title"], description=article["description"], url=article["url"],color=discord.Color.blue())
                await ctx.send(embed=emend)
            else:
                break
    else:
        await ctx.send(f"{innews} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")



@bot.command(help="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.weather [–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞]")
async def weather(ctx, *, city: str = None):
    try:
        weather_data = requests.get(f"https://api.openweathermap.org/data/2.5/weather?q={city}&units=imperial&APPID={weather_key}")
        if weather_data.json()['cod'] == '404':
           await ctx.send(f"–ì–æ—Ä–æ–¥ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        weather = weather_data.json()['weather'][0]['main']
        temp = round(weather_data.json()['main']['temp'])
        country_name = weather_data.json()['sys']['country']
        celsius = (temp - 32) * 5/9
        int_celsius = int(celsius)
        await ctx.send(f"""
    –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}  {weather} , —Å—Ç—Ä–∞–Ω–∞: {country_name}
    –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {city} : {int_celsius}¬∞C
    """)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ {ctx.command}: {e}")



@bot.command(help="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ –Ω—É–∂–Ω–æ–≥–æ –í–∞–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.rnum [–ß–∏—Å–ª–æ]")
async def rnum(ctx , *, randeom_num: int = None):
    try:
        randrom_number = random.randint(1, randeom_num)
        await ctx.send(f"–í–∞—à–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ {randrom_number} ~ {ctx.message.author.mention}")
    except ValueError:
        await ctx.send(f"{randeom_num} —ç—Ç–æ –Ω–µ –Ω–æ–º–µ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º {ctx.message.author.mention}")


#–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†


@bot.command(help="–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.math [–ß–∏—Å–ª–æ + | - | * | /  –ß–∏—Å–ª–æ]")
async def math(ctx, *,  expression: str = None):
    try:
        await ctx.send(f"{eval(expression)}")
    except SyntaxError:
        await ctx.send(f"{expression} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è + –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è, - –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è, * –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –∏ / –¥–ª—è –¥–µ–ª–µ–Ω–∏—è ~ {ctx.message.author.mention}")
    except NameError:
        await ctx.send(f"{expression} –û—à–∏–±–∫–∞ –≤ –∏–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å ~ {ctx.message.author.mention}")
    except ZeroDivisionError:
        await ctx.send(f"–î–µ–ª–∏—Ç—å –Ω–∞ 0 –Ω–µ–ª—å–∑—è! {ctx.message.author.mention}")



@bot.command(help="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.ping")
async def ping(ctx):
    await ctx.send(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞: {round(bot.latency * 1000)}ms")

#–ë–ï–°–ü–û–õ–ï–ó–ù–´–ô –û–ü–†–û–°

@bot.command(help="–°–æ–∑–¥–∞–π—Ç–µ –æ–ø—Ä–æ—Å, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∞–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.vote [–ù–∞–∑–≤–∞–Ω–∏–µ] [–û–ø–∏—Å–∞–Ω–∏–µ]")
async def vote(ctx, name,*, svote):
    embend = discord.Embed(title=name, color = discord.Color.random())
    embend.add_field(name=name, value=svote)
    vote_massege = await ctx.send(embed=embend)
    await vote_massege.add_reaction('\N{THUMBS UP SIGN}')
    await vote_massege.add_reaction('\N{THUMBS DOWN SIGN}')

@bot.command(help="s.check_vote", value="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –ó–ê –∏ –ü–†–û–¢–ò–í —É –æ–ø—Ä–æ—Å–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: s.check_vote [–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞]")
async def check_vote(ctx, vote_title):
    try:
        async for message in ctx.channel.history():
            if message.embeds and message.embeds[0].title == vote_title: 
                thumbs_up = 0
                thumbs_down = 0
                for reaction in message.reactions:
                    if str(reaction.emoji) == 'üëç':
                        thumbs_up = reaction.count - 1 
                    elif str(reaction.emoji) == 'üëé':
                        thumbs_down = reaction.count - 1
                    await ctx.send(f'–ï—Å—Ç—å –ó–ê: {thumbs_up}, –µ—Å—Ç—å –ü–†–û–¢–ò–í: {thumbs_down} –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤: {reaction.count - 1}.')
                    return
        await ctx.send(f"{vote_title} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ {ctx.command}: {e}")


@bot.command()
async def members(ctx, guild_id: int):
    guild = bot.get_guild(guild_id)
    if guild is None:
        await ctx.send("Invalid Guild ID.")
        return
    member_count = guild.member_count
    await ctx.send(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {member_count}.")


@bot.command()
async def askwiki(ctx, *, query):
    try:
        headers = {'User-Agent': 'StarloExo Bot/1.0 (Discord Bot)'}
        wiki_wiki = wikipediaapi.Wikipedia('ru', language='ru', headers=headers)
        page = wiki_wiki.page(query)
        page_summary = page.summary

        if page_summary:
            image_url = f"https://ru.wikipedia.org/wiki/File:{page.title.replace(' ', '_')}.png"

            embed = discord.Embed(title=query, description=page_summary)
            embed.set_image(url=image_url)
            await ctx.send(embed=embed)
        else:
            await ctx.send("No Wikipedia page found for the given query.")
    except json.JSONDecodeError:
        await ctx.send("Error: Invalid JSON response from the Wikipedia API.")
    except Exception as e:
        await ctx.send(f"Error: {str(e)}")


@bot.command()
async def serverstats(ctx):
    guild = ctx.guild

    embed = discord.Embed(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–µ—Ä–≤–µ—Ä–∞:", color=discord.Color.green())

    embed.set_thumbnail(url=guild.icon.url)

    embed.add_field(name="–ò–º—è –°–µ—Ä–≤–µ—Ä–∞:", value=guild.name, inline=True)
    embed.add_field(name="ID –°–µ—Ä–≤–µ—Ä–∞:", value=guild.id, inline=True)
    embed.add_field(name="–í–ª–∞–¥–µ–ª–µ—Ü:", value=guild.owner.name if guild.owner else "Unknown", inline=True)
    embed.add_field(name="–ö–æ–ª-–≤–æ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", value=guild.member_count, inline=True)
    embed.add_field(name="–î–∞—Ç–∞ –°–æ–∑–¥–∞–Ω–∏—è:", value=guild.created_at.strftime("%d-%m-%Y %H:%M:%S"), inline=True)

    await ctx.send(embed=embed)


@bot.command(name='art')
async def generate_image(ctx, *, prompt):
    api_url = "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0"
    headers = {"Authorization": f"Bearer {HUGGING_FACE_API_TOKEN}"}

    #payload = {
    #    "inputs": prompt,
    #    "options": {
    #        "wait_for_model": True
    #    }
    #}
    def query(payload):
        response = requests.post(api_url, headers=headers, json=payload)

        return response.content

    try:

        bytes = query(
            {
                "inputs": prompt
            }
        )
        import io
        from PIL import Image
        image = Image.open(io.BytesIO(bytes))
        with io.BytesIO() as image_binary:
            image.save(image_binary, 'JPEG')
            image_binary.seek(0)
            await ctx.send(file=discord.File(fp=image_binary, filename='generated_image.jpg'))


    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API: {e}")
        await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API.")

    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API.")


bot.run(discordtoken)